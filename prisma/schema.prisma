generator client {
  provider        = "prisma-client-js"
}
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// schema.prisma
model Course {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  slug       String @unique
  description String
  features String []
  whatToLearn String []
  requirements String []
  milestones String []
  content String?
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(true)
  isFeatured Boolean @default(false)
  attachments Attachment [] 
  purchases   Purchase[] 
  chapters    Chapter[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Attachment {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  url       String
  courseId  String @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Purchase {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String
  
  courseId String @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Chapter {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  courseId String @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title   String
  description String
  videoUrl    String?
  isPublished Boolean @default(false)
  isPaid Boolean @default(true)
  userProgress UserProgress []
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model UserProgress {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String

  chapterId String @db.ObjectId
  chapter    Chapter   @relation(fields: [chapterId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model User{
// id  String  @id @default(auto()) @map("_id") @db.ObjectId
// stripeCustomerId String
// }
model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  userId             String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
// Enum for user roles
enum UserRole {
  ADMIN
  USER
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  role           UserRole   @default(USER) // Default role is USER
  profile        Profile? // Link to user profile
  accounts      Account[]
  sessions      Session[]
}
model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  // Add other fields for user onboarding information
  // For example:
  dateOfBirth DateTime?
  address    String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



